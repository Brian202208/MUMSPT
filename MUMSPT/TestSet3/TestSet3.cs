using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MUMSPT.TestSet4
{
   public static class TestSet3
    {
        /// <summary>
        /// The Stanton measure of an array is computed as follows. 
        /// Count the number of 1s in the array. Let this count be n. 
        /// The Stanton measure is the number of times that n appears in the array. 
        /// For example, the Stanton measure of {1, 4, 3, 2, 1, 2, 3, 2} 
        /// is 3 because 1 occurs 2 times in the array and 2 occurs 3 times.
        /// </summary>
        /// <param name="a"></param>
        /// <returns></returns>
        public static int stantonMeasure(int[] a)
        {
            int oneCount = 0,occurCount = 0;
            for (int i = 0; i < a.Length; i++)
            {
                if(a[i] == 1)
                {
                    oneCount++;
                }
            }
            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == oneCount) occurCount++;
            }

            return occurCount;

        }

        /// <summary>
        /// The sum factor of an array is defined to be the number 
        /// of times that the sum of the array appears as an element of the array. 
        /// So the sum factor of {1, -1, 1, -1, 1, -1, 1} is 4 
        /// because the sum of the elements of the array is 1 and 1 appears four times in the array.
        ///  And the sum factor of {1, 2, 3, 4} is 0 
        /// because the sum of the elements of the array is 10 and 10 does not occur as an element of the array.
       ///  The sum factor of the empty array { } is defined to be 0.
        /// </summary>
        /// <param name="a"></param>
        /// <returns></returns>
        public static int sumFactor(int[] a)
        {
            int sum = 0, sumfactor = 0;

            for (int i = 0; i < a.Length; i++)
            {
                sum += a[i];
            }

            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == sum) sumfactor++;

            }
            return sumfactor;
        }


        /// <summary>
        /// The Guthrie index of a positive number n is defined to be how many
       ///  iterations of the above algorithm it takes before n becomes 1.
        /// For example, the Guthrie index of the number 7 is 16 
        /// because the following sequence is 16 numbers long.
        /// 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1
        /// It is easy to see that this sequence was generated by the above algorithm.
        /// Since 7 is odd multiply by 3 and add 1 to get 22 
        /// which is the first number of the sequence.
        /// Since 22 is even, divide by 2 to get 11 which is the second number of the sequence.
        /// 11 is odd so multiply by 3 and 
        /// add 1 to get 34 which is the third number of the sequence and so on.
        /// </summary>
        /// <param name="n"></param>
        /// <returns></returns>
        public static int guthrieIndex(int n)
        {
            int gindex = 0;


            while (n !=1) 
            {
                if(n % 2== 0)
                {
                    n = n / 2;
                }
                else
                {
                    n = n * 3 + 1;
                }
                gindex++;
            }
           
            return gindex;
        }


       
    }
}
